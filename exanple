I'd be glad to assist you with implementing the add-to-cart functionality in your XAMPP PHP project. Here's a comprehensive guide incorporating the best aspects of previous responses and addressing potential issues:
1. Prepare Your Project:
 * Ensure you have XAMPP installed and running on your system.
 * Create a new project directory and set up your database (e.g., MySQL) with a products table containing relevant fields like id, name, price, image, etc.
2. Create Necessary Files:
 * index.php: This will be your main product listing page.
 * cart.php: This will handle the cart functionality, including adding, removing, and displaying items.
 * functions.php: This file will store common functions used throughout your project.
3. Implement the Product Listing Page (index.php):
<?php
include 'functions.php';

// Retrieve products from the database
$products = getProducts();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Listing</title>
</head>
<body>
    <h1>Products</h1>
    <table>
        <tr>
            <th>Product</th>
            <th>Price</th>
            <th>Add to Cart</th>
        </tr>
        <?php foreach ($products as $product): ?>
        <tr>
            <td><?php echo $product['name']; ?></td>
            <td><?php echo $product['price']; ?></td>
            <td><a href="cart.php?action=add&id=<?php echo $product['id']; ?>">Add</a></td>
        </tr>
        <?php endforeach; ?>
    </table>
</body>
</html>

4. Implement the Cart Functionality (cart.php):
<?php
include 'functions.php';

// Handle cart actions
if (isset($_GET['action'])) {
    switch ($_GET['action']) {
        case 'add':
            addToCart($_GET['id']);
            break;
        case 'remove':
            removeFromCart($_GET['id']);
            break;
        case 'empty':
            emptyCart();
            break;
    }
}

// Get the cart contents
$cart = getCart();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>
    <h1>Shopping Cart</h1>
    <table>
        <tr>
            <th>Product</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Total</th>
            <th>Remove</th>
        </tr>
        <?php foreach ($cart as $product): ?>
        <tr>
            <td><?php echo $product['name']; ?></td>
            <td><?php echo $product['price']; ?></td>
            <td><input type="number" name="quantity" value="<?php echo $product['quantity']; ?>"></td>
            <td><?php echo $product['price'] * $product['quantity']; ?></td>
            <td><a href="cart.php?action=remove&id=<?php echo $product['id']; ?>">Remove</a></td>
        </tr>
        <?php endforeach; ?>
        <tr>
            <td colspan="4"><strong>Total:</strong></td>
            <td><?php echo getCartTotal(); ?></td>
        </tr>
    </table>
    <a href="cart.php?action=empty">Empty Cart</a>
</body>
</html>

5. Implement Common Functions (functions.php):
<?php
session_start();

function getProducts() {
    // Replace with your database query to fetch products
    $products = array(
        array('id' => 1, 'name' => 'Product 1', 'price' => 10),
        array('id' => 2, 'name' => 'Product 2', 'price' => 20),
        // ... more products
    );
    return $products;
}

function addToCart($productId) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }
    if (array_key_exists($productId, $_SESSION['cart'])) {
        $_SESSION['cart'][$productId]++;
    } else {
        $_SESSION['cart'][$productId] = 1;
    }
}

// ... other functions like removeFromCart, emptyCart, getCartTotal, etc.

Additional Considerations:
 * Security:
   * Sanitize user input to prevent SQL injection and other attacks.
   * Consider using prepared statements or parameterized queries for database interactions.
 * User Experience:
   * Provide clear feedback to the user when adding or removing items from the cart.
   * Implement a checkout process and handle order processing.
 * Error Handling:
   * Handle potential errors gracefully and provide informative messages to the user.
 * Customization:
   * Customize the appearance and functionality of your cart to match your project's design and requirements.
By following these steps and incorporating the provided code, you should be able to successfully implement the add-to-cart functionality in your XAMPP PHP project.
 * https://github.com/trungdungly/mvc
 * 
 * I'd be glad to help you implement an alert message without redirecting to the cart page when clicking the "Add to Cart" button. Here's the enhanced code incorporating the best aspects of previous responses and addressing potential issues:
 1. Prepare Your Project:
  * Ensure you have XAMPP installed and running on your system.
  * Create a new project directory and set up your database (e.g., MySQL) with a products table containing relevant fields like id, name, price, image, etc.
 2. Create Necessary Files:
  * index.php: This will be your main product listing page.
  * functions.php: This file will store common functions used throughout your project.
 3. Implement the Product Listing Page (index.php):
 
 <!DOCTYPE html>

 <?php
 include 'functions.php';
 
 // Retrieve products from the database
 $products = getProducts();
 
 ?>

 <html>
 <head>
     <title>Product Listing</title>
     <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
 </head>
 <body>
     <h1>Products</h1>
     <table>
         <tr>
             <th>Product</th>
             <th>Price</th>
             <th>Add to Cart</th>
         </tr>
         <?php foreach ($products as $product): ?>
         <tr>
             <td><?php echo $product['name']; ?></td>
             <td><?php echo $product['price']; ?></td>
             <td><button class="add-to-cart" data-id="<?php echo $product['id']; ?>">Add</button></td>
         </tr>
         <?php endforeach; ?>
     </table>
 
     <script>
         $(document).ready(function() {
             $('.add-to-cart').click(function() {
                 var productId = $(this).data('id');
                 $.ajax({
                     url: 'functions.php',
                     type: 'POST',
                     data: { action: 'add', id: productId },
                     success: function(response) {
                         alert(response.message);
                     }
                 });
             });
         });
     </script>
 </body>
 </html>
 
 4. Implement Common Functions (functions.php):
 <?php
 session_start();
 
 function getProducts() {
     // Replace with your database query to fetch products
     $products = array(
         array('id' => 1, 'name' => 'Product 1', 'price' => 10),
         array('id' => 2, 'name' => 'Product 2', 'price' => 20),
         // ... more products
     );
     return $products;
 }
 
 function addToCart($productId) {
     if (!isset($_SESSION['cart'])) {
         $_SESSION['cart'] = array();
     }
     if (array_key_exists($productId, $_SESSION['cart'])) {
         $_SESSION['cart'][$productId]++;
     } else {
         $_SESSION['cart'][$productId] = 1;
     }
 
     return array('message' => 'Item added to cart successfully!');
 }
 
 Explanation:
  * The index.php file now uses jQuery to handle the "Add to Cart" button click event.
  * When a button is clicked, an AJAX request is sent to the functions.php file with the product ID.
  * The addToCart function in functions.php adds the product to the cart and returns an alert message.
  * The AJAX request's success callback displays the alert message to the user without reloading the page.
 Additional Considerations:
  * Error Handling:
    * Implement error handling in functions.php to catch potential issues and display appropriate messages to the user.
  * Customization:
    * Customize the alert message and its appearance to match your project's style.
  * User Experience:
    * Consider providing additional feedback to the user, such as updating the cart count or displaying a notification.
 By following these steps, you should be able to effectively implement an alert message without redirecting to the cart page when clicking the "Add to Cart" button in your XAMPP PHP project.

 


   <div class=" table-body">
       <div class="table-header">
         <div class="table-row">
           <div class="table-cell">Menu Item Name</div>
           <div class="table-cell">Amount</div>
           <div class="table-cell">Price</div>
           <div class="table-cell">Subtotal</div>
         </div>
       </div>
       <div class="table-data">
         <?php
         if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
           $total = 0;
           foreach ($_SESSION['cart'] as $item) {
             $subtotal = $item['price'] * $item['amm'];
             $total += $subtotal;
             echo '<div class="table-row">';
             echo '<div class="table-cell">' . htmlspecialchars($item['name']) . '</div>';
             echo '<div class="table-cell"> X' . htmlspecialchars($item['amm']) . '</div>';
             echo '<div class="table-cell">Rs.' . number_format($item['price'], 2) . '</div>';
             echo '<div class="table-cell">Rs.' . number_format($subtotal, 2) . '</div>';
             echo '</div>';
           }
           echo '<div class="table-row">';
           echo '<div class="table-cell" style="flex:3;">Total</div>';
           echo '<div class="table-cell">Rs.' . number_format($total, 2) . '</div>';
           echo '</div>';
         } else {
           echo '<div class="table-row-mt" id="last-row"><div class="table-cell">No records found</div></div>';
         }
         ?>
       </div>
   </div>
 </div>
</div>
</div>
</div>

document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.add-to-cart').forEach(function(button) {
      button.addEventListener('click', function(event) {
        event.preventDefault();
        var productId = this.getAttribute('href').split('=')[1];
        fetch('addToCart.php?product_id=' + productId, {
          method: 'GET'
        })
        .then(response => response.text())
        .then(data => alert('Product added to cart!'))
        .catch(error => console.error('Error:', error));
      });
    });
  });
  